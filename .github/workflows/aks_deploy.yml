name: "Provision AKS cluster"

on:
    workflow_dispatch:
        inputs:
            region:
                description: Deployment region
                required: false
                default: westus2

env:
    AKS_REGION: ${{ github.event.inputs.region || westus2 }}
    AKS_RESOURCE_GROUP_NAME: zimagi-rg
    AKS_CLUSTER_NAME: zimagi-aks

jobs:
    provision_backend:
        name: "Provision Azure backend"
        strategy:
            max-parallel: 1
        runs-on: ubuntu-latest
        steps:
            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Create azure backend
              run: |
                  az group create --name $AZURE_TF_RESOURCE_GROUP_NAME --location $AKS_REGION
                  az storage account create -n $AZURE_TF_STORAGE_ACCOUNT_NAME -g $AZURE_TF_RESOURCE_GROUP_NAME -l $AKS_REGION --sku Standard_LRS
                  az storage container create -n terraform-state --account-name $AZURE_TF_STORAGE_ACCOUNT_NAME
              env:
                  AZURE_TF_RESOURCE_GROUP_NAME: "zimagi-tf-rg"
                  AZURE_TF_STORAGE_ACCOUNT_NAME: "zimagi-tf-backend"

    terraform_apply:
        name: "Terraform Apply"
        needs: [provision_backend]
        strategy:
            max-parallel: 1
        runs-on: ubuntu-latest
        steps:
            - name: "Checkout"
              uses: actions/checkout@master

            - name: "Terraform Format"
              uses: hashicorp/terraform-github-actions@master
              with:
                  tf_actions_version: 0.12.13
                  tf_actions_subcommand: "fmt"
                  tf_actions_working_dir: "./aks"
                  tf_actions_comment: true

            - name: "Terraform Init"
              uses: hashicorp/terraform-github-actions@master
              with:
                  tf_actions_version: 0.12.13
                  tf_actions_subcommand: "init"
                  tf_actions_working_dir: "./aks"
                  tf_actions_comment: true
              env:
                  ARM_CLIENT_ID: ${{ secrets.AZURE_TF_VAR_AGENT_CLIENT_ID }}
                  ARM_CLIENT_SECRET: ${{ secrets.AZURE_TF_VAR_AGENT_CLIENT_SECRET }}
                  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_TF_VAR_SUBSCRIPTION_ID }}
                  ARM_TENANT_ID: ${{ secrets.AZURE_TF_VAR_TENANT_ID }}

            - name: "Terraform Validate"
              uses: hashicorp/terraform-github-actions@master
              with:
                  tf_actions_version: 0.12.13
                  tf_actions_subcommand: "validate"
                  tf_actions_working_dir: "./aks"
                  tf_actions_comment: true
              env:
                  ARM_CLIENT_ID: ${{ secrets.AZURE_TF_VAR_AGENT_CLIENT_ID }}
                  ARM_CLIENT_SECRET: ${{ secrets.AZURE_TF_VAR_AGENT_CLIENT_SECRET }}
                  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_TF_VAR_SUBSCRIPTION_ID }}
                  ARM_TENANT_ID: ${{ secrets.AZURE_TF_VAR_TENANT_ID }}

            - name: "Terraform Plan"
              uses: hashicorp/terraform-github-actions@master
              with:
                  tf_actions_version: 0.12.13
                  tf_actions_subcommand: "plan"
                  tf_actions_working_dir: "./aks"
                  tf_actions_comment: true
              env:
                  ARM_CLIENT_ID: ${{ secrets.AZURE_TF_VAR_AGENT_CLIENT_ID }}
                  ARM_CLIENT_SECRET: ${{ secrets.AZURE_TF_VAR_AGENT_CLIENT_SECRET }}
                  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_TF_VAR_SUBSCRIPTION_ID }}
                  ARM_TENANT_ID: ${{ secrets.AZURE_TF_VAR_TENANT_ID }}

            - name: "Terraform Apply"
              uses: hashicorp/terraform-github-actions@master
              with:
                  tf_actions_version: 0.12.13
                  tf_actions_subcommand: "apply"
                  tf_actions_working_dir: "./aks"
                  tf_actions_comment: true
              env:
                  ARM_CLIENT_ID: ${{ secrets.AZURE_TF_VAR_AGENT_CLIENT_ID }}
                  ARM_CLIENT_SECRET: ${{ secrets.AZURE_TF_VAR_AGENT_CLIENT_SECRET }}
                  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_TF_VAR_SUBSCRIPTION_ID }}
                  ARM_TENANT_ID: ${{ secrets.AZURE_TF_VAR_TENANT_ID }}

    deploy_ingress_controller:
        name: "Deploy application gateway ingress controller"
        needs: [provision_backend, terraform_apply]
        strategy:
            max-parallel: 1
        runs-on: ubuntu-latest
        steps:
            - name: "Checkout"
              uses: actions/checkout@master

            - uses: azure/setup-kubectl@v1
              with:
                  version: "v1.18.8"

            - uses: azure/setup-helm@v1
              with:
                  version: "v3.4.0"

            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: "Deploy ingress controller"
              run: |
                  PUBLIC_IP_ADDRESS=$(az network public-ip create --resource-group MC_${AKS_RESOURCE_GROUP_NAME}_${AKS_CLUSTER_NAME}_${AKS_REGION} --location $AKS_REGION --name zimagi-agic --sku Standard --allocation-method static --query publicIp.ipAddress -o=tsv)

                  az aks get-credentials \
                    --name ${AKS_CLUSTER_NAME} \
                    --resource-group ${AKS_RESOURCE_GROUP_NAME}

                  kubectl create namespace nginx-ingress

                  helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
                  helm repo add jetstack https://charts.jetstack.io
                  helm repo update

                  helm install nginx-ingress ingress-nginx/ingress-nginx \
                      --namespace nginx-ingress \
                      --set controller.replicaCount=2 \
                      --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
                      --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
                      --set controller.admissionWebhooks.patch.nodeSelector."beta\.kubernetes\.io/os"=linux \
                      --set controller.service.loadBalancerIP=${PUBLIC_IP_ADDRESS} \
                      --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="zimagi"

                  kubectl label namespace nginx-ingress cert-manager.io/disable-validation=true

                  helm install \
                    cert-manager \
                    --namespace nginx-ingress \
                    --version v0.16.1 \
                    --set installCRDs=true \
                    --set nodeSelector."beta\.kubernetes\.io/os"=linux \
                    jetstack/cert-manager

                  # Wait until cert manager will be available
                  sleep 60

                  kubectl apply -f ./aks/k8s/cluster-issuer.yaml
